let resources = require('../resources/model');let fs = require('fs');let wsServer = require('../server/websockets');let ledplugin = require('../plugins/leds');let interval, sensor;let pirModel = resources.pi.sensors.PIR;let alertLEDModel = resources.pi.actuators.leds["4"];let pluginName = resources.pi.sensors.PIR.name;let lockProxyModel = observe(pirModel);let observe = function (model) {    return new Proxy(model, {        set: function (target, key, value) {            try {                /*ledplugin.blinkLED(1, 'Someone is here');*/                if (key === 'lock') {                    console.log(target);                    console.log(key);                    console.log(value);                    switch (value) {                        case 0 :                            ledplugin.switching(alertLEDModel , 0);                            break;                        case 1 :                            if (key === 'value') {                                ledplugin.switching(alertLEDModel, 1);                            }                            break;                    }                    showValue();                }                Reflect.set(target, key, value);            } catch (err) {                console.log(err)            }        }    });};exports.start = function () {    connectHardware();};function connectHardware() {    var Gpio = require('onoff').Gpio;    sensor = new Gpio(pirModel.gpio, 'in', 'both');    sensor.watch(function (err, value) {        if (err) {            exit(err);        }        pirModel.value = !!value;    });    console.info('Hardware %s sensor started!', pluginName);}function showValue() {    let d = new Date();    let motion = pirModel.value ? 'there is someone!' : 'not anymore!';    let log = d + ': ' + motion + '\n';    fs.appendFile('security_LOG.txt', log, function (err) {        if (err) throw err    });    //console.log(log)}