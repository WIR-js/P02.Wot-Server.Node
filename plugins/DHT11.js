let resources = require('../resources/model'),    utils = require('../utils/utils');let alert = false;let sensor;let DHT11Model = resources.pi.sensors.DHT11;let pluginName = 'Temperature & Humidity';let ws = require('../server/websockets');exports.start = function (params) {    connectHardware(params);};exports.stop = function () {    sensor.unexport();    console.info('%s plugin stopped!', pluginName);};function connectHardware(params) {    let sensorDriver = require('node-dht-sensor');    sensor = {        initialize: function () {            return sensorDriver.initialize(11, DHT11Model.gpio);        },        read: function () {            let readout = sensorDriver.read();            let tempModel = observe(DHT11Model.temperature);            tempModel.value = parseFloat(readout.temperature.toFixed(2));            DHT11Model.temperature.value = tempModel.value;            DHT11Model.humidity.value = parseFloat(readout.humidity.toFixed(2));            ws.send(JSON.stringify({                "temperature": DHT11Model.temperature.value,                "humidity": DHT11Model.humidity.value ,                "security": resources.pi.sensors.PIR.lock,                "alert" : resources.pi.actuators.leds["4"].value            }));            setTimeout(function () {                sensor.read();            }, params.frequency);        }    };    if (sensor.initialize()) {        console.info('Hardware %s sensor started!', pluginName);        sensor.read();    } else {        console.warn('Failed to initialize sensor!');    }}let observe = function (model) {    return new Proxy(model, {        set: function (target, key, value) {            try {                switch (key) {                    case 'value':                        let ledplugin = require('../plugins/leds');                        let alertValue = parseInt(model.alertValue);                        if (value > alertValue) {                            console.log('\x1b[93m%s\x1b[0m' , 'High Temprature!!!!');                            ws.send('High Temprature!!!!')                        }                        break;                }                return Reflect.set(target, key, value);            } catch (err) {                console.log(err)            }        }    });};